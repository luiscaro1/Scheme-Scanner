/* The following code was generated by JFlex 1.7.0 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scheme.flex</tt>
 */
class scheme {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\5\1\5\1\1\22\0\1\3\1\31\1\45"+
    "\1\43\1\37\1\37\1\37\1\57\1\52\1\53\1\33\1\35\1\60"+
    "\1\11\1\36\1\40\1\42\1\50\6\51\2\41\1\37\1\4\1\37"+
    "\1\37\1\37\1\37\1\46\5\37\1\37\15\37\1\37\6\37\1\54"+
    "\1\44\1\55\1\37\1\37\1\56\1\15\1\25\1\20\1\26\1\7"+
    "\1\30\1\32\1\37\1\27\2\37\1\6\1\24\1\14\1\23\1\34"+
    "\1\21\1\17\1\12\1\10\1\22\2\37\1\16\1\13\1\37\2\0"+
    "\1\47\1\37\6\0\1\5\32\0\1\3\u15df\0\1\3\u097f\0\13\3"+
    "\35\0\1\5\1\5\5\0\1\3\57\0\1\3\u0fa0\0\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\13\4\1\5\2\6\1\2"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\4\1\6\1\0\7\4\1\17\1\4\1\0"+
    "\1\6\4\0\1\6\1\0\2\4\1\6\1\4\1\6"+
    "\1\4\1\0\1\20\7\0\1\21\1\17\13\4\1\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\1\6\1\4"+
    "\1\6\2\4\2\6\2\0\1\6\3\0\1\6\2\0"+
    "\1\6\2\0\1\22\1\21\10\4\2\0\2\6\2\0"+
    "\3\6\2\0\2\6\3\4\1\6\7\0\1\6\4\0"+
    "\1\6\4\0\1\6\1\0\4\4\4\0\2\6\1\0"+
    "\2\6\1\0\3\4\1\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\4\1\17\1\4"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\2\6\1\0\1\6\2\4\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\61\0\61\0\61"+
    "\0\365\0\365\0\365\0\61\0\61\0\u03d4\0\u0405\0\61"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\365\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\365\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\61\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u03a3"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\61\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0126"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\61\0\61\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\2\7\1\10"+
    "\1\11\1\7\1\12\1\13\2\7\1\14\1\15\3\7"+
    "\1\16\1\17\1\20\5\7\1\10\1\21\2\7\1\22"+
    "\1\23\1\24\1\7\1\25\1\26\1\2\2\22\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\63\0\1\4"+
    "\56\0\1\5\2\0\2\5\1\0\53\5\6\0\1\7"+
    "\1\36\5\7\1\37\25\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\35\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\31\0\1\40\6\0\1\41\2\0\2\22"+
    "\5\0\2\22\15\0\1\7\1\42\33\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\14\7\1\43\20\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\6\7"+
    "\1\44\26\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\10\0\7\7\1\45\5\7\1\13\17\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\14\7\1\46\20\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\1\7"+
    "\1\47\33\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\10\0\1\7\1\50\13\7\1\51\3\7\1\52\13\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\22\7"+
    "\1\51\12\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\40\0\1\53\2\0\2\54\5\0\2\54\15\0\2\55"+
    "\1\0\1\56\1\55\13\0\1\55\1\40\1\55\4\0"+
    "\1\57\1\54\1\0\1\60\2\22\1\61\2\0\1\62"+
    "\1\0\2\22\15\0\2\63\1\7\1\64\1\63\13\7"+
    "\1\63\1\65\1\63\4\7\1\66\1\67\1\7\1\70"+
    "\2\23\1\61\1\7\1\0\1\62\1\0\2\23\2\0"+
    "\3\7\11\0\1\71\1\72\5\0\1\73\4\0\1\74"+
    "\1\0\1\75\1\76\1\71\14\0\1\77\14\0\44\100"+
    "\1\101\1\102\13\100\6\0\2\7\1\103\32\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\10\0\16\7\1\104"+
    "\16\7\1\0\1\7\3\0\2\7\2\0\3\7\43\0"+
    "\2\54\5\0\2\54\15\0\2\7\1\105\32\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\10\0\1\106\34\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\20\7"+
    "\1\51\14\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\10\0\4\7\1\107\30\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\7\7\1\110\5\7\1\111\17\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\24\7"+
    "\1\112\10\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\10\0\1\113\21\7\1\114\12\7\1\0\1\7\3\0"+
    "\2\7\2\0\3\7\10\0\4\7\1\115\30\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\40\0\1\116\30\0"+
    "\2\55\1\0\1\56\1\55\13\0\1\55\1\40\1\55"+
    "\4\0\1\57\1\117\2\0\2\120\1\121\2\0\1\62"+
    "\1\0\2\120\20\0\1\122\23\0\1\122\3\0\2\123"+
    "\5\0\2\123\36\0\1\40\6\0\1\117\2\0\2\124"+
    "\5\0\2\124\45\0\1\117\2\0\2\124\5\0\2\124"+
    "\50\0\2\125\5\0\2\125\15\0\2\55\1\0\1\56"+
    "\1\55\13\0\1\55\1\40\1\55\4\0\1\57\1\121"+
    "\1\0\1\60\2\124\1\61\2\0\1\62\1\126\2\124"+
    "\20\0\1\127\23\0\1\127\1\130\2\0\2\131\5\0"+
    "\2\131\15\0\3\7\1\132\23\7\1\132\3\7\2\133"+
    "\1\0\1\7\3\0\2\133\2\0\3\7\10\0\21\7"+
    "\1\65\6\7\1\134\2\7\2\135\1\0\1\7\3\0"+
    "\2\135\2\0\3\7\10\0\30\7\1\134\2\7\2\135"+
    "\1\0\1\7\3\0\2\135\2\0\3\7\10\0\2\63"+
    "\1\7\1\64\1\63\13\7\1\63\1\65\1\63\4\7"+
    "\1\66\1\134\2\7\2\136\1\121\1\7\1\0\1\62"+
    "\1\0\2\136\2\0\3\7\10\0\33\7\2\137\1\0"+
    "\1\7\3\0\2\137\2\0\3\7\13\0\1\140\23\0"+
    "\1\140\1\41\2\0\2\22\1\141\4\0\2\22\16\0"+
    "\1\142\1\0\1\143\3\0\1\142\2\0\1\142\4\0"+
    "\2\142\1\0\1\142\4\0\1\143\3\0\2\142\1\144"+
    "\4\0\2\142\20\0\1\145\23\0\1\145\4\0\1\146"+
    "\1\147\4\0\2\146\20\0\1\150\23\0\1\150\4\0"+
    "\1\151\1\152\4\0\1\151\21\0\1\140\23\0\1\140"+
    "\1\41\2\0\2\22\1\153\4\0\2\22\7\0\1\154"+
    "\2\0\56\154\44\100\1\101\14\100\45\0\1\155\21\0"+
    "\3\7\1\156\5\7\1\157\13\7\1\51\7\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\10\0\17\7\1\160"+
    "\15\7\1\0\1\7\3\0\2\7\2\0\3\7\10\0"+
    "\23\7\1\51\11\7\1\0\1\7\3\0\2\7\2\0"+
    "\3\7\10\0\1\51\34\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\1\7\1\51\33\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\4\7\1\161\30\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\2\7"+
    "\1\107\32\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\10\0\21\7\1\162\13\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\7\7\1\163\25\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\21\7\1\164\13\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\26\7"+
    "\1\165\6\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\43\0\2\166\5\0\2\166\15\0\2\55\1\0\1\56"+
    "\1\55\13\0\1\55\1\40\1\55\4\0\1\57\1\166"+
    "\1\0\1\167\2\120\1\170\2\0\1\62\1\0\2\120"+
    "\15\0\2\55\1\0\1\56\1\55\13\0\1\55\1\40"+
    "\1\55\4\0\1\57\1\117\2\0\2\124\1\121\2\0"+
    "\1\62\1\0\2\124\50\0\2\123\5\0\2\123\20\0"+
    "\1\56\15\0\1\40\5\0\1\57\1\117\2\0\2\171"+
    "\3\0\1\62\1\0\2\171\15\0\2\172\1\0\1\57"+
    "\1\172\13\0\1\172\1\40\1\172\4\0\1\57\1\166"+
    "\1\0\1\167\2\124\1\173\4\0\2\124\20\0\1\56"+
    "\15\0\1\40\5\0\1\57\1\117\2\0\2\174\1\175"+
    "\2\0\1\62\1\0\2\174\45\0\1\121\60\0\1\130"+
    "\2\0\2\131\5\0\2\131\50\0\2\176\5\0\2\176"+
    "\15\0\2\177\2\0\1\177\13\0\1\177\1\0\1\177"+
    "\5\0\1\176\1\0\1\200\2\131\1\201\4\0\2\131"+
    "\15\0\33\7\2\133\1\0\1\7\3\0\2\133\2\0"+
    "\3\7\10\0\3\7\1\64\15\7\1\65\5\7\1\66"+
    "\1\134\2\7\2\202\1\0\1\7\1\0\1\62\1\0"+
    "\2\202\2\0\3\7\10\0\33\7\2\203\1\0\1\7"+
    "\3\0\2\203\2\0\3\7\10\0\2\204\1\7\1\66"+
    "\1\204\13\7\1\204\1\65\1\204\4\7\1\66\1\203"+
    "\1\7\1\205\2\135\1\173\1\7\3\0\2\135\2\0"+
    "\3\7\10\0\2\63\1\7\1\64\1\63\13\7\1\63"+
    "\1\65\1\63\4\7\1\66\1\203\1\7\1\205\2\136"+
    "\1\170\1\7\1\0\1\62\1\0\2\136\2\0\3\7"+
    "\10\0\3\7\1\64\15\7\1\65\5\7\1\66\1\134"+
    "\2\7\2\206\1\175\1\7\1\0\1\62\1\0\2\206"+
    "\2\0\3\7\20\0\1\207\4\0\1\210\1\0\1\211"+
    "\1\212\41\0\1\142\1\0\1\213\3\0\1\142\2\0"+
    "\1\142\4\0\2\142\1\40\1\142\4\0\1\214\2\0"+
    "\1\215\2\142\1\216\2\0\1\217\1\0\2\142\16\0"+
    "\1\142\5\0\1\142\2\0\1\142\4\0\2\142\1\40"+
    "\1\142\10\0\2\142\5\0\2\142\16\0\1\207\17\0"+
    "\1\207\60\0\1\40\12\0\1\146\5\0\2\146\20\0"+
    "\1\220\15\0\1\40\5\0\1\221\2\0\1\222\1\0"+
    "\1\146\1\223\2\0\1\224\1\0\2\146\16\0\1\210"+
    "\17\0\1\210\60\0\1\40\12\0\1\151\5\0\1\151"+
    "\21\0\1\225\15\0\1\40\5\0\1\226\2\0\1\227"+
    "\1\0\1\151\1\230\2\0\1\231\1\0\1\151\17\0"+
    "\1\211\17\0\1\211\40\0\1\212\17\0\1\212\37\0"+
    "\4\7\1\232\30\7\1\0\1\7\3\0\2\7\2\0"+
    "\3\7\10\0\1\7\1\233\33\7\1\0\1\7\3\0"+
    "\2\7\2\0\3\7\10\0\20\7\1\234\14\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\10\0\21\7\1\235"+
    "\13\7\1\0\1\7\3\0\2\7\2\0\3\7\10\0"+
    "\6\7\1\51\26\7\1\0\1\7\3\0\2\7\2\0"+
    "\3\7\10\0\5\7\1\51\27\7\1\0\1\7\3\0"+
    "\2\7\2\0\3\7\10\0\6\7\1\107\26\7\1\0"+
    "\1\7\3\0\2\7\2\0\3\7\10\0\1\113\34\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\2\172"+
    "\1\0\1\57\1\172\13\0\1\172\1\40\1\172\4\0"+
    "\1\57\1\117\2\0\2\124\1\166\4\0\2\124\50\0"+
    "\2\236\5\0\2\236\15\0\2\55\1\0\1\56\1\55"+
    "\13\0\1\55\1\40\1\55\4\0\1\57\1\166\1\0"+
    "\1\167\2\124\1\170\2\0\1\62\1\237\2\124\15\0"+
    "\2\172\1\0\1\56\1\172\13\0\1\172\1\40\1\172"+
    "\4\0\1\57\1\166\1\0\1\167\2\171\1\173\2\0"+
    "\1\62\1\0\2\171\20\0\1\240\23\0\1\240\3\0"+
    "\2\241\5\0\2\241\15\0\2\172\1\0\1\57\1\172"+
    "\13\0\1\172\1\40\1\172\4\0\1\57\1\166\1\0"+
    "\1\167\2\124\1\173\3\0\1\237\2\124\15\0\2\172"+
    "\1\0\1\56\1\172\13\0\1\172\1\40\1\172\4\0"+
    "\1\57\1\166\1\0\1\167\2\174\1\242\2\0\1\62"+
    "\1\0\2\174\20\0\1\56\15\0\1\40\5\0\1\57"+
    "\1\117\2\0\2\124\1\175\2\0\1\62\1\0\2\124"+
    "\15\0\2\177\2\0\1\177\13\0\1\177\1\0\1\177"+
    "\10\0\2\176\1\243\4\0\2\176\20\0\1\244\23\0"+
    "\1\244\3\0\2\245\5\0\2\245\50\0\2\246\5\0"+
    "\2\246\15\0\2\177\2\0\1\177\13\0\1\177\1\0"+
    "\1\177\5\0\1\243\1\0\1\200\2\0\1\201\3\0"+
    "\1\247\17\0\2\204\1\7\1\64\1\204\13\7\1\204"+
    "\1\65\1\204\4\7\1\66\1\203\1\7\1\205\2\202"+
    "\1\173\1\7\1\0\1\62\1\0\2\202\2\0\3\7"+
    "\10\0\2\204\1\7\1\66\1\204\13\7\1\204\1\65"+
    "\1\204\4\7\1\66\1\134\2\7\2\135\1\166\1\7"+
    "\3\0\2\135\2\0\3\7\10\0\3\7\1\250\23\7"+
    "\1\250\3\7\2\251\1\0\1\7\3\0\2\251\2\0"+
    "\3\7\10\0\33\7\2\252\1\0\1\7\3\0\2\252"+
    "\2\0\3\7\10\0\2\204\1\7\1\64\1\204\13\7"+
    "\1\204\1\65\1\204\4\7\1\66\1\203\1\7\1\205"+
    "\2\206\1\242\1\7\1\0\1\62\1\0\2\206\2\0"+
    "\3\7\11\0\1\142\1\0\1\143\3\0\1\142\2\0"+
    "\1\142\4\0\2\142\1\0\1\142\4\0\1\143\3\0"+
    "\2\142\5\0\2\142\20\0\1\145\23\0\1\145\4\0"+
    "\1\146\5\0\2\146\20\0\1\150\23\0\1\150\4\0"+
    "\1\151\5\0\1\151\21\0\1\140\23\0\1\140\1\41"+
    "\2\0\2\22\5\0\2\22\16\0\1\253\5\0\1\253"+
    "\2\0\1\253\4\0\2\253\1\40\1\253\10\0\2\253"+
    "\5\0\2\253\16\0\1\253\5\0\1\253\2\0\1\253"+
    "\4\0\2\253\1\0\1\253\10\0\2\253\5\0\2\253"+
    "\16\0\1\254\5\0\1\254\2\0\1\254\4\0\2\254"+
    "\1\0\1\254\10\0\2\254\5\0\2\254\16\0\1\253"+
    "\1\0\1\213\3\0\1\253\2\0\1\253\4\0\2\253"+
    "\1\40\1\253\4\0\1\214\2\0\1\215\2\253\1\216"+
    "\2\0\1\217\1\0\2\253\16\0\1\255\1\0\1\256"+
    "\3\0\1\255\2\0\1\255\4\0\2\255\1\0\1\255"+
    "\4\0\1\256\3\0\2\255\5\0\2\255\36\0\1\40"+
    "\12\0\1\257\5\0\2\257\51\0\1\257\5\0\2\257"+
    "\51\0\1\260\5\0\2\260\20\0\1\220\15\0\1\40"+
    "\5\0\1\221\2\0\1\222\1\0\1\257\1\223\2\0"+
    "\1\224\1\0\2\257\20\0\1\261\23\0\1\261\4\0"+
    "\1\262\5\0\2\262\36\0\1\40\12\0\1\263\5\0"+
    "\1\263\52\0\1\263\5\0\1\263\52\0\1\264\5\0"+
    "\1\264\21\0\1\225\15\0\1\40\5\0\1\226\2\0"+
    "\1\227\1\0\1\263\1\230\2\0\1\231\1\0\1\263"+
    "\21\0\1\265\23\0\1\265\4\0\1\266\5\0\1\266"+
    "\16\0\5\7\1\267\27\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\12\7\1\270\22\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\7\7\1\51\25\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\10\0\13\7"+
    "\1\271\21\7\1\0\1\7\3\0\2\7\2\0\3\7"+
    "\13\0\1\57\15\0\1\40\5\0\1\57\1\117\2\0"+
    "\2\124\1\236\4\0\2\124\45\0\1\166\63\0\2\241"+
    "\5\0\2\241\20\0\1\57\15\0\1\40\5\0\1\57"+
    "\1\117\2\0\2\124\5\0\2\124\15\0\2\172\1\0"+
    "\1\56\1\172\13\0\1\172\1\40\1\172\4\0\1\57"+
    "\1\166\1\0\1\167\2\124\1\242\2\0\1\62\1\237"+
    "\2\124\15\0\2\177\2\0\1\177\13\0\1\177\1\0"+
    "\1\177\12\0\1\243\56\0\2\245\5\0\2\245\50\0"+
    "\2\246\1\272\4\0\2\246\45\0\1\243\30\0\33\7"+
    "\2\251\1\0\1\7\3\0\2\251\2\0\3\7\10\0"+
    "\3\7\1\66\15\7\1\65\5\7\1\66\1\134\2\7"+
    "\2\135\1\0\1\7\3\0\2\135\2\0\3\7\10\0"+
    "\3\7\1\66\15\7\1\65\5\7\1\66\1\134\2\7"+
    "\2\135\1\236\1\7\3\0\2\135\2\0\3\7\11\0"+
    "\1\253\1\0\1\214\3\0\1\253\2\0\1\253\4\0"+
    "\2\253\1\40\1\253\4\0\1\214\2\0\1\273\3\253"+
    "\4\0\2\253\16\0\1\274\1\0\1\213\3\0\1\274"+
    "\2\0\1\274\4\0\2\274\1\40\1\274\4\0\1\214"+
    "\3\0\2\274\1\275\2\0\1\217\1\0\2\274\16\0"+
    "\1\255\5\0\1\255\2\0\1\255\4\0\2\255\1\0"+
    "\1\255\7\0\1\276\2\255\1\277\4\0\2\255\16\0"+
    "\1\255\5\0\1\255\2\0\1\255\4\0\2\255\1\0"+
    "\1\255\10\0\2\255\5\0\2\255\20\0\1\221\15\0"+
    "\1\40\5\0\1\221\2\0\1\300\1\0\2\257\4\0"+
    "\2\257\20\0\1\220\15\0\1\40\5\0\1\221\4\0"+
    "\1\301\1\302\2\0\1\224\1\0\2\301\51\0\1\262"+
    "\5\0\2\262\47\0\1\303\1\0\1\262\1\304\4\0"+
    "\2\262\20\0\1\226\15\0\1\40\5\0\1\226\2\0"+
    "\1\305\1\0\2\263\4\0\1\263\21\0\1\225\15\0"+
    "\1\40\5\0\1\226\4\0\1\306\1\307\2\0\1\231"+
    "\1\0\1\306\52\0\1\266\5\0\1\266\50\0\1\310"+
    "\1\0\1\266\1\311\4\0\1\266\16\0\6\7\1\312"+
    "\26\7\1\0\1\7\3\0\2\7\2\0\3\7\10\0"+
    "\3\7\1\156\31\7\1\0\1\7\3\0\2\7\2\0"+
    "\3\7\10\0\14\7\1\313\20\7\1\0\1\7\3\0"+
    "\2\7\2\0\3\7\45\0\1\272\24\0\1\314\5\0"+
    "\1\314\2\0\1\314\4\0\2\314\1\0\1\314\10\0"+
    "\2\314\5\0\2\314\16\0\1\274\1\0\1\213\3\0"+
    "\1\274\2\0\1\274\4\0\2\274\1\40\1\274\4\0"+
    "\1\214\2\0\1\273\2\274\1\315\2\0\1\217\1\0"+
    "\2\274\16\0\1\253\1\0\1\213\3\0\1\253\2\0"+
    "\1\253\4\0\2\253\1\40\1\253\4\0\1\214\3\0"+
    "\2\253\1\275\2\0\1\217\1\0\2\253\16\0\1\316"+
    "\5\0\1\316\2\0\1\316\4\0\2\316\1\0\1\316"+
    "\10\0\2\316\5\0\2\316\47\0\1\276\2\0\1\277"+
    "\57\0\1\317\5\0\2\317\20\0\1\220\15\0\1\40"+
    "\5\0\1\221\2\0\1\300\1\0\1\301\1\320\2\0"+
    "\1\224\1\0\2\301\20\0\1\220\15\0\1\40\5\0"+
    "\1\221\4\0\1\257\1\302\2\0\1\224\1\0\2\257"+
    "\51\0\1\321\5\0\2\321\47\0\1\303\2\0\1\304"+
    "\57\0\1\322\5\0\1\322\21\0\1\225\15\0\1\40"+
    "\5\0\1\226\2\0\1\305\1\0\1\306\1\323\2\0"+
    "\1\231\1\0\1\306\21\0\1\225\15\0\1\40\5\0"+
    "\1\226\4\0\1\263\1\307\2\0\1\231\1\0\1\263"+
    "\52\0\1\324\5\0\1\324\50\0\1\310\2\0\1\311"+
    "\23\0\2\7\1\325\32\7\1\0\1\7\3\0\2\7"+
    "\2\0\3\7\10\0\15\7\1\111\17\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\11\0\1\253\1\0\1\214"+
    "\3\0\1\253\2\0\1\253\4\0\2\253\1\40\1\253"+
    "\4\0\1\214\3\0\2\253\1\314\4\0\2\253\16\0"+
    "\1\253\1\0\1\213\3\0\1\253\2\0\1\253\4\0"+
    "\2\253\1\40\1\253\4\0\1\214\2\0\1\273\2\253"+
    "\1\315\2\0\1\217\1\0\2\253\16\0\1\316\5\0"+
    "\1\316\2\0\1\316\4\0\2\316\1\0\1\316\10\0"+
    "\2\316\1\272\4\0\2\316\20\0\1\221\15\0\1\40"+
    "\5\0\1\221\4\0\1\257\1\317\4\0\2\257\20\0"+
    "\1\220\15\0\1\40\5\0\1\221\2\0\1\300\1\0"+
    "\1\257\1\320\2\0\1\224\1\0\2\257\51\0\1\321"+
    "\1\272\4\0\2\321\20\0\1\226\15\0\1\40\5\0"+
    "\1\226\4\0\1\263\1\322\4\0\1\263\21\0\1\225"+
    "\15\0\1\40\5\0\1\226\2\0\1\305\1\0\1\263"+
    "\1\323\2\0\1\231\1\0\1\263\52\0\1\324\1\272"+
    "\4\0\1\324\16\0\7\7\1\326\25\7\1\0\1\7"+
    "\3\0\2\7\2\0\3\7\10\0\10\7\1\51\24\7"+
    "\1\0\1\7\3\0\2\7\2\0\3\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\21\1\3\11\3\1\2\11"+
    "\2\1\1\11\1\0\11\1\1\0\1\1\4\0\1\1"+
    "\1\0\6\1\1\0\1\11\7\0\14\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\3\0\7\1\2\0"+
    "\1\1\3\0\1\1\2\0\1\1\2\0\2\11\10\1"+
    "\2\0\2\1\2\0\3\1\2\0\6\1\7\0\1\1"+
    "\4\0\1\1\4\0\1\1\1\0\4\1\4\0\2\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scheme(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                                  "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 19: break;
          case 2: 
            { 
            } 
            // fall through
          case 20: break;
          case 3: 
            { System.out.println("COMMENT \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 21: break;
          case 4: 
            { System.out.println("IDENTIFIER \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 22: break;
          case 5: 
            { System.out.println("DOT \""+yytext()+"\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 23: break;
          case 6: 
            { System.out.println("NUMBER \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 24: break;
          case 7: 
            { System.out.println("AT \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 25: break;
          case 8: 
            { System.out.println("LP \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 26: break;
          case 9: 
            { System.out.println("RP \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 27: break;
          case 10: 
            { System.out.println("LSB \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 28: break;
          case 11: 
            { System.out.println("RSB \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 29: break;
          case 12: 
            { System.out.println("DIACRITIC \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 30: break;
          case 13: 
            { System.out.println("SQ \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 31: break;
          case 14: 
            { System.out.println("COMMA \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 32: break;
          case 15: 
            { System.out.println("KEYWORD \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 33: break;
          case 16: 
            { System.out.println("BOOL \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 34: break;
          case 17: 
            { System.out.println("STR \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 35: break;
          case 18: 
            { System.out.println("CHAR \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scheme [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scheme scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scheme(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
