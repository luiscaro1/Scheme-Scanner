/* The following code was generated by JFlex 1.7.0 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scheme.flex</tt>
 */
class scheme {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\5\1\5\1\1\22\0\1\3\1\11\1\22"+
    "\1\15\1\11\1\11\1\11\1\20\1\3\1\3\1\11\1\6\1\3"+
    "\1\7\1\10\1\12\1\14\1\34\6\35\2\13\1\11\1\4\1\11"+
    "\1\11\1\11\1\11\1\23\5\11\1\11\15\11\1\11\6\11\1\11"+
    "\1\21\1\11\1\11\1\11\1\11\1\36\1\31\1\36\1\30\1\26"+
    "\1\17\1\11\1\11\1\24\2\11\1\27\1\11\1\11\1\32\1\11"+
    "\1\11\1\11\1\27\1\16\1\11\2\11\1\33\1\11\1\11\2\0"+
    "\1\25\1\11\6\0\1\5\32\0\1\3\u15df\0\1\3\u097f\0\13\3"+
    "\35\0\1\5\1\5\5\0\1\3\57\0\1\3\u0fa0\0\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\7\2\1\1\12\0\1\2\17\0\4\2"+
    "\4\0\1\2\5\0\1\2\4\0\1\2\4\0\1\2"+
    "\4\0\1\2\6\0\1\2\3\0\1\2\3\0\1\2"+
    "\7\0\2\2\4\0\1\2\1\0\1\2\2\0\2\2"+
    "\2\0\1\2\2\0\2\2\2\0\1\2\2\0\2\2"+
    "\2\0\1\2\5\0\1\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\2\0\1\2\1\0\1\2\2\0\1\2"+
    "\1\0\1\2\2\0\1\2\6\0\1\2\4\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\0\2\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\37\0\135\0\174\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\370\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0573"+
    "\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b"+
    "\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763"+
    "\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b"+
    "\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b"+
    "\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43"+
    "\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b"+
    "\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33"+
    "\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b"+
    "\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23"+
    "\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b"+
    "\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4\0\u1113"+
    "\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec\0\u120b"+
    "\0\u122a\0\u1249\0\u1268\0\u1287\0\u12a6\0\u12c5\0\u12e4\0\u1303"+
    "\0\u1322\0\u1341\0\u1360\0\u137f\0\u139e\0\u13bd\0\u13dc\0\u13fb"+
    "\0\u141a\0\u12a6\0\u1439\0\u1458\0\u1477";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\3\4\1\6\2\7\1\4"+
    "\1\7\1\10\2\7\1\11\1\7\1\12\1\4\1\7"+
    "\1\2\6\7\2\4\1\7\41\0\1\4\34\0\1\5"+
    "\2\0\2\5\1\0\31\5\10\0\1\13\34\0\7\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\11\7"+
    "\16\0\1\4\2\0\1\14\2\0\1\15\1\0\1\15"+
    "\1\0\1\16\1\17\1\20\1\21\11\0\2\11\1\22"+
    "\2\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\2\0\1\7\21\23\1\24\1\25"+
    "\14\23\10\0\1\4\26\0\1\4\2\0\34\4\15\0"+
    "\1\26\36\0\1\27\36\0\1\30\36\0\1\31\36\0"+
    "\1\32\31\0\1\33\26\0\21\23\1\24\15\23\22\0"+
    "\1\4\44\0\1\34\1\35\1\36\1\37\27\0\1\34"+
    "\1\0\1\34\34\0\1\35\1\0\1\35\34\0\1\36"+
    "\1\0\1\36\34\0\1\37\1\0\1\37\20\0\1\11"+
    "\34\0\2\40\35\0\2\41\35\0\2\42\35\0\2\43"+
    "\37\0\1\44\2\0\2\45\7\0\1\4\7\0\2\45"+
    "\15\0\1\46\7\0\1\4\7\0\1\46\16\0\1\47"+
    "\7\0\1\4\7\0\2\47\14\0\2\50\2\0\1\50"+
    "\4\0\1\4\1\0\1\50\1\0\2\50\2\0\3\50"+
    "\13\0\2\51\17\0\2\51\7\0\1\52\1\53\1\51"+
    "\1\0\1\54\2\45\1\55\1\0\1\56\3\0\1\57"+
    "\1\4\1\0\3\56\3\0\2\45\7\0\1\60\1\61"+
    "\2\0\1\62\1\0\1\46\1\63\5\0\1\64\1\4"+
    "\7\0\1\46\10\0\1\65\1\66\2\0\1\67\1\0"+
    "\1\47\1\70\5\0\1\71\1\4\7\0\2\47\7\0"+
    "\1\72\1\73\2\0\1\74\2\50\1\75\1\0\1\50"+
    "\3\0\1\76\1\4\1\0\1\50\1\0\2\50\2\0"+
    "\3\50\13\0\2\51\1\77\1\0\1\56\6\0\3\56"+
    "\3\0\2\51\11\0\1\100\2\0\2\101\17\0\2\101"+
    "\11\0\1\100\2\0\2\101\7\0\1\4\7\0\2\101"+
    "\14\0\2\102\17\0\2\102\7\0\1\52\1\53\1\103"+
    "\1\0\1\54\2\104\1\55\1\0\1\56\3\0\1\57"+
    "\1\4\1\105\3\56\3\0\2\104\7\0\2\106\35\0"+
    "\2\107\43\0\1\110\17\0\1\110\16\0\1\110\7\0"+
    "\1\4\7\0\1\110\16\0\1\111\17\0\1\111\10\0"+
    "\1\60\1\61\2\0\1\62\1\0\1\112\1\63\5\0"+
    "\1\64\1\4\7\0\1\112\10\0\2\113\43\0\1\114"+
    "\17\0\2\114\15\0\1\114\7\0\1\4\7\0\2\114"+
    "\15\0\1\115\17\0\2\115\7\0\1\65\1\66\2\0"+
    "\1\67\1\0\1\116\1\70\5\0\1\71\1\4\7\0"+
    "\2\116\7\0\2\117\42\0\2\120\2\0\1\120\6\0"+
    "\1\120\1\0\2\120\2\0\3\120\13\0\2\120\2\0"+
    "\1\120\4\0\1\4\1\0\1\120\1\0\2\120\2\0"+
    "\3\120\13\0\2\121\2\0\1\121\6\0\1\121\1\0"+
    "\2\121\2\0\3\121\6\0\1\72\1\73\2\0\1\74"+
    "\2\122\1\75\1\0\1\122\3\0\1\76\1\4\1\0"+
    "\1\122\1\0\2\122\2\0\3\122\6\0\2\123\44\0"+
    "\1\77\1\0\1\56\6\0\3\56\21\0\2\124\17\0"+
    "\2\124\7\0\2\52\1\124\1\0\1\125\2\101\1\126"+
    "\1\0\1\127\4\0\1\4\1\0\3\127\3\0\2\101"+
    "\7\0\1\52\1\53\1\130\2\0\2\131\1\132\5\0"+
    "\1\57\1\4\7\0\2\131\14\0\2\133\1\77\1\0"+
    "\1\56\6\0\3\56\3\0\2\133\11\0\1\133\1\0"+
    "\1\134\2\104\1\135\1\0\1\136\4\0\1\4\1\0"+
    "\3\136\3\0\2\104\11\0\1\77\41\0\2\137\17\0"+
    "\2\137\11\0\1\140\2\0\2\141\17\0\2\141\7\0"+
    "\2\60\2\0\1\142\1\0\1\110\1\143\6\0\1\4"+
    "\7\0\1\110\10\0\1\60\1\61\4\0\1\144\1\145"+
    "\5\0\1\64\1\4\7\0\1\144\14\0\1\146\1\0"+
    "\1\112\1\147\6\0\1\4\7\0\1\112\16\0\1\150"+
    "\17\0\1\150\10\0\2\65\2\0\1\151\1\0\1\114"+
    "\1\152\6\0\1\4\7\0\2\114\7\0\1\65\1\66"+
    "\4\0\1\153\1\154\5\0\1\71\1\4\7\0\2\153"+
    "\13\0\1\155\1\0\1\116\1\156\6\0\1\4\7\0"+
    "\2\116\15\0\1\157\17\0\2\157\7\0\2\72\2\0"+
    "\1\160\2\120\1\161\1\0\1\120\4\0\1\4\1\0"+
    "\1\120\1\0\2\120\2\0\3\120\6\0\1\72\1\73"+
    "\3\0\2\162\1\163\1\0\1\162\3\0\1\76\1\4"+
    "\1\0\1\162\1\0\2\162\2\0\3\162\12\0\1\164"+
    "\2\122\1\165\1\0\1\122\4\0\1\4\1\0\1\122"+
    "\1\0\2\122\2\0\3\122\13\0\2\166\2\0\1\166"+
    "\6\0\1\166\1\0\2\166\2\0\3\166\13\0\2\124"+
    "\1\167\1\0\1\127\6\0\3\127\3\0\2\124\14\0"+
    "\2\170\17\0\2\170\7\0\2\52\1\171\1\0\1\125"+
    "\2\104\1\126\1\0\1\127\4\0\1\4\1\172\3\127"+
    "\3\0\2\104\7\0\2\173\42\0\2\133\17\0\2\133"+
    "\7\0\1\52\1\53\1\133\1\0\1\134\2\131\1\174"+
    "\1\0\1\136\3\0\1\57\1\4\1\0\3\136\3\0"+
    "\2\131\7\0\1\52\1\53\1\130\2\0\2\104\1\132"+
    "\5\0\1\57\1\4\7\0\2\104\14\0\2\133\1\175"+
    "\1\0\1\136\6\0\3\136\3\0\2\133\14\0\2\176"+
    "\17\0\2\176\11\0\1\175\1\0\1\134\2\0\1\135"+
    "\1\0\1\136\4\0\1\4\1\177\3\136\14\0\2\200"+
    "\35\0\1\52\1\53\1\130\2\0\2\201\6\0\1\57"+
    "\1\4\7\0\2\201\14\0\2\202\17\0\2\202\11\0"+
    "\1\202\1\0\1\203\2\141\1\204\1\0\1\205\6\0"+
    "\3\205\3\0\2\141\15\0\1\206\17\0\1\206\10\0"+
    "\2\60\2\0\1\142\1\0\1\112\1\143\6\0\1\4"+
    "\7\0\1\112\10\0\1\60\1\61\2\0\1\146\1\0"+
    "\1\144\1\207\5\0\1\64\1\4\7\0\1\144\10\0"+
    "\1\60\1\61\4\0\1\112\1\145\5\0\1\64\1\4"+
    "\7\0\1\112\16\0\1\210\17\0\1\210\14\0\1\146"+
    "\2\0\1\147\6\0\1\4\24\0\1\211\1\0\1\150"+
    "\1\212\16\0\1\150\16\0\1\213\17\0\2\213\7\0"+
    "\2\65\2\0\1\151\1\0\1\116\1\152\6\0\1\4"+
    "\7\0\2\116\7\0\1\65\1\66\2\0\1\155\1\0"+
    "\1\153\1\214\5\0\1\71\1\4\7\0\2\153\7\0"+
    "\1\65\1\66\4\0\1\116\1\154\5\0\1\71\1\4"+
    "\7\0\2\116\15\0\1\215\17\0\2\215\13\0\1\155"+
    "\2\0\1\156\6\0\1\4\24\0\1\216\1\0\1\157"+
    "\1\217\16\0\2\157\14\0\2\220\2\0\1\220\6\0"+
    "\1\220\1\0\2\220\2\0\3\220\6\0\2\72\2\0"+
    "\1\160\2\122\1\161\1\0\1\122\4\0\1\4\1\0"+
    "\1\122\1\0\2\122\2\0\3\122\6\0\1\72\1\73"+
    "\2\0\1\164\2\162\1\221\1\0\1\162\3\0\1\76"+
    "\1\4\1\0\1\162\1\0\2\162\2\0\3\162\6\0"+
    "\1\72\1\73\3\0\2\122\1\163\1\0\1\122\3\0"+
    "\1\76\1\4\1\0\1\122\1\0\2\122\2\0\3\122"+
    "\13\0\2\222\2\0\1\222\6\0\1\222\1\0\2\222"+
    "\2\0\3\222\12\0\1\164\2\0\1\165\6\0\1\4"+
    "\24\0\1\223\2\166\1\224\1\0\1\166\6\0\1\166"+
    "\1\0\2\166\2\0\3\166\15\0\1\167\1\0\1\127"+
    "\6\0\3\127\14\0\2\52\1\130\2\0\2\225\1\226"+
    "\6\0\1\4\7\0\2\225\14\0\2\133\1\167\1\0"+
    "\1\127\6\0\3\127\3\0\2\133\11\0\1\167\41\0"+
    "\2\227\17\0\2\227\7\0\1\52\1\53\1\133\1\0"+
    "\1\134\2\104\1\174\1\0\1\136\3\0\1\57\1\4"+
    "\1\177\3\136\3\0\2\104\16\0\1\175\1\0\1\136"+
    "\6\0\3\136\21\0\2\176\1\230\6\0\1\4\7\0"+
    "\2\176\11\0\1\175\41\0\2\231\17\0\2\231\7\0"+
    "\1\52\1\53\1\133\1\0\1\134\2\201\1\135\1\0"+
    "\1\136\3\0\1\57\1\4\1\0\3\136\3\0\2\201"+
    "\14\0\2\202\1\232\1\0\1\205\6\0\3\205\3\0"+
    "\2\202\14\0\2\233\17\0\2\233\11\0\1\232\1\0"+
    "\1\203\2\0\1\204\1\0\1\205\5\0\1\234\3\205"+
    "\14\0\2\235\35\0\2\60\4\0\1\236\1\237\6\0"+
    "\1\4\7\0\1\236\10\0\1\60\1\61\2\0\1\146"+
    "\1\0\1\112\1\207\5\0\1\64\1\4\7\0\1\112"+
    "\16\0\1\210\1\230\6\0\1\4\7\0\1\210\16\0"+
    "\1\240\17\0\1\240\14\0\1\211\2\0\1\212\27\0"+
    "\2\65\4\0\1\241\1\242\6\0\1\4\7\0\2\241"+
    "\7\0\1\65\1\66\2\0\1\155\1\0\1\116\1\214"+
    "\5\0\1\71\1\4\7\0\2\116\15\0\1\215\1\230"+
    "\6\0\1\4\7\0\2\215\15\0\1\243\17\0\2\243"+
    "\13\0\1\216\2\0\1\217\27\0\2\72\3\0\2\244"+
    "\1\245\1\0\1\244\4\0\1\4\1\0\1\244\1\0"+
    "\2\244\2\0\3\244\6\0\1\72\1\73\2\0\1\164"+
    "\2\122\1\221\1\0\1\122\3\0\1\76\1\4\1\0"+
    "\1\122\1\0\2\122\2\0\3\122\13\0\2\222\1\230"+
    "\1\0\1\222\4\0\1\4\1\0\1\222\1\0\2\222"+
    "\2\0\3\222\13\0\2\246\2\0\1\246\6\0\1\246"+
    "\1\0\2\246\2\0\3\246\12\0\1\223\2\0\1\224"+
    "\27\0\2\52\1\133\1\0\1\134\2\225\1\247\1\0"+
    "\1\136\4\0\1\4\1\0\3\136\3\0\2\225\7\0"+
    "\2\52\1\130\2\0\2\104\1\226\6\0\1\4\7\0"+
    "\2\104\7\0\2\52\1\130\2\0\2\250\7\0\1\4"+
    "\7\0\2\250\16\0\1\230\6\0\1\4\25\0\2\231"+
    "\7\0\1\4\7\0\2\231\16\0\1\232\1\0\1\205"+
    "\6\0\3\205\21\0\2\233\1\251\16\0\2\233\11\0"+
    "\1\232\41\0\2\252\17\0\2\252\7\0\2\60\2\0"+
    "\1\146\1\0\1\236\1\253\6\0\1\4\7\0\1\236"+
    "\10\0\2\60\4\0\1\112\1\237\6\0\1\4\7\0"+
    "\1\112\16\0\1\240\1\251\16\0\1\240\10\0\2\65"+
    "\2\0\1\155\1\0\1\241\1\254\6\0\1\4\7\0"+
    "\2\241\7\0\2\65\4\0\1\116\1\242\6\0\1\4"+
    "\7\0\2\116\15\0\1\243\1\251\16\0\2\243\7\0"+
    "\2\72\2\0\1\164\2\244\1\255\1\0\1\244\4\0"+
    "\1\4\1\0\1\244\1\0\2\244\2\0\3\244\6\0"+
    "\2\72\3\0\2\122\1\245\1\0\1\122\4\0\1\4"+
    "\1\0\1\122\1\0\2\122\2\0\3\122\13\0\2\246"+
    "\1\251\1\0\1\246\6\0\1\246\1\0\2\246\2\0"+
    "\3\246\6\0\2\52\1\133\1\0\1\134\2\104\1\247"+
    "\1\0\1\136\4\0\1\4\1\177\3\136\3\0\2\104"+
    "\7\0\2\52\1\133\1\0\1\134\2\250\1\135\1\0"+
    "\1\136\4\0\1\4\1\0\3\136\3\0\2\250\16\0"+
    "\1\251\27\0\2\60\2\0\1\146\1\0\1\112\1\253"+
    "\6\0\1\4\7\0\1\112\10\0\2\65\2\0\1\155"+
    "\1\0\1\116\1\254\6\0\1\4\7\0\2\116\7\0"+
    "\2\72\2\0\1\164\2\122\1\255\1\0\1\122\4\0"+
    "\1\4\1\0\1\122\1\0\2\122\2\0\3\122";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\12\0\1\1\17\0"+
    "\4\1\4\0\1\1\5\0\1\1\4\0\1\1\4\0"+
    "\1\1\4\0\1\1\6\0\1\1\3\0\1\1\3\0"+
    "\1\1\7\0\2\1\4\0\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\1\1\2\0\2\1\2\0\1\1\2\0"+
    "\2\1\2\0\1\1\5\0\1\1\4\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\1\6\0\1\1\4\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scheme(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                                  "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 3: break;
          case 2: 
            { 
            } 
            // fall through
          case 4: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scheme [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scheme scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scheme(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
