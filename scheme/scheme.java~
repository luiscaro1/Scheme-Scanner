/* The following code was generated by JFlex 1.7.0 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scheme.flex</tt>
 */
class scheme {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\5\1\5\1\1\22\0\1\3\1\13\1\31"+
    "\1\22\1\14\1\14\1\14\1\21\1\7\1\24\1\15\1\10\1\24"+
    "\1\11\1\12\1\16\1\17\1\43\6\44\2\6\1\14\1\4\1\14"+
    "\1\14\1\14\1\14\1\25\5\14\1\30\15\14\1\30\6\14\1\23"+
    "\1\20\1\23\1\14\1\14\1\23\1\50\1\40\1\45\1\36\1\34"+
    "\1\27\1\55\1\14\1\32\2\14\1\37\1\54\1\47\1\41\1\14"+
    "\1\52\1\51\1\35\1\26\1\53\2\14\1\42\1\46\1\14\2\0"+
    "\1\33\1\14\6\0\1\5\32\0\1\3\u15df\0\1\3\u097f\0\13\3"+
    "\35\0\1\5\1\5\5\0\1\3\57\0\1\3\u0fa0\0\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\3\1\4\1\3\2\4"+
    "\4\3\1\2\1\1\11\4\1\0\1\2\2\0\1\2"+
    "\1\0\2\2\10\0\3\4\1\2\11\4\7\0\1\2"+
    "\2\4\1\3\6\4\4\0\6\4\4\0\4\4\1\2"+
    "\1\0\3\2\1\4\1\3\1\4\4\0\1\2\5\0"+
    "\1\2\4\0\1\2\4\0\1\2\1\0\2\4\3\0"+
    "\1\2\6\0\1\2\3\0\1\2\3\0\1\2\2\0"+
    "\1\4\4\0\1\2\1\0\1\2\4\0\1\2\1\0"+
    "\1\2\2\0\2\2\2\0\1\2\2\0\2\2\2\0"+
    "\1\2\2\0\2\2\2\0\1\2\1\4\5\0\1\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\2\0\1\2"+
    "\1\0\1\2\2\0\1\2\1\0\1\2\2\0\1\2"+
    "\1\3\6\0\1\2\4\0\1\2\2\0\1\2\2\0"+
    "\1\2\2\0\2\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\212\0\270\0\270\0\270"+
    "\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\u0114\0\56\0\u0114"+
    "\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e"+
    "\0\u033c\0\u036a\0\56\0\u0398\0\u03c6\0\u03f4\0\270\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u01cc\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44"+
    "\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224"+
    "\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394"+
    "\0\u23c2\0\u23f0\0\u0142\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\u258e\0\u27e4\0\u2812\0\u2840";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\1\7\2\10"+
    "\1\11\4\12\2\13\1\14\1\15\1\16\2\17\1\12"+
    "\2\20\1\21\1\22\1\2\1\12\1\23\1\24\1\25"+
    "\1\26\2\12\2\6\1\27\1\12\1\30\1\31\1\12"+
    "\1\32\3\12\6\33\5\0\4\12\2\13\1\33\1\0"+
    "\1\12\2\33\3\12\1\33\1\12\1\33\7\12\2\0"+
    "\11\12\2\33\1\4\3\33\5\0\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\7\12"+
    "\2\0\11\12\1\5\2\33\2\5\1\33\5\34\4\5"+
    "\2\34\1\5\1\34\20\5\2\34\11\5\70\0\1\35"+
    "\43\0\6\33\1\13\1\0\3\13\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\7\12"+
    "\2\13\11\12\6\0\1\13\1\0\11\13\2\0\1\13"+
    "\2\0\3\13\1\0\1\13\1\0\22\13\6\36\2\0"+
    "\2\37\1\40\4\41\2\42\1\36\1\0\1\41\2\36"+
    "\3\41\1\36\1\41\1\36\7\41\2\0\11\41\7\0"+
    "\1\37\10\0\1\43\5\0\1\37\3\0\1\44\1\0"+
    "\1\44\1\0\1\45\1\0\1\46\1\47\1\50\13\0"+
    "\6\51\5\52\4\53\1\54\1\55\1\51\1\52\1\53"+
    "\2\51\3\53\1\56\1\53\1\51\7\53\2\52\11\53"+
    "\6\33\1\13\1\0\3\13\4\12\2\13\1\33\1\0"+
    "\1\12\2\33\1\12\1\16\1\12\1\33\1\12\1\33"+
    "\7\12\2\13\11\12\6\33\1\13\1\0\3\13\4\12"+
    "\2\13\1\33\1\0\1\12\2\33\3\12\1\33\1\12"+
    "\1\33\1\57\6\12\2\13\11\12\6\33\1\13\1\0"+
    "\3\13\4\12\2\13\1\33\1\0\1\12\2\33\3\12"+
    "\1\33\1\12\1\33\1\60\4\12\1\16\1\12\2\13"+
    "\11\12\6\33\1\13\1\0\3\13\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\1\61"+
    "\6\12\2\13\3\12\1\62\5\12\6\33\1\13\1\0"+
    "\3\13\4\12\2\13\1\33\1\0\1\12\2\33\3\12"+
    "\1\33\1\12\1\33\1\63\6\12\2\13\11\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\5\12\1\31\1\12"+
    "\2\13\3\12\1\64\5\12\6\33\1\13\1\0\3\13"+
    "\4\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\7\12\2\13\6\12\1\65\2\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\7\12\2\13\2\12"+
    "\1\66\6\12\6\33\1\13\1\0\3\13\4\12\2\13"+
    "\1\33\1\0\1\12\2\33\3\12\1\33\1\12\1\33"+
    "\7\12\2\13\6\12\1\67\2\12\1\34\2\0\2\34"+
    "\1\0\50\34\12\0\1\10\43\0\6\36\5\0\4\41"+
    "\2\42\1\36\1\0\1\41\2\36\3\41\1\36\1\41"+
    "\1\36\7\41\2\0\11\41\12\0\1\70\43\0\6\36"+
    "\1\42\1\0\3\42\4\41\2\42\1\36\1\0\1\41"+
    "\2\36\3\41\1\36\1\41\1\36\7\41\2\42\11\41"+
    "\6\0\1\42\1\0\11\42\2\0\1\42\2\0\3\42"+
    "\1\0\1\42\1\0\22\42\1\37\2\0\53\37\22\0"+
    "\1\71\55\0\1\72\55\0\1\73\55\0\1\74\55\0"+
    "\1\75\33\0\20\52\1\76\10\52\1\77\24\52\6\51"+
    "\1\54\1\52\3\54\4\53\1\54\1\55\1\51\1\52"+
    "\1\53\2\51\3\53\1\56\1\53\1\51\7\53\2\54"+
    "\11\53\6\52\1\54\1\52\10\54\1\55\2\52\1\54"+
    "\2\52\3\54\1\77\1\54\1\52\22\54\6\52\1\54"+
    "\1\52\10\54\1\55\2\52\1\54\2\52\3\54\1\52"+
    "\1\54\1\52\22\54\6\33\5\0\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\4\1\12\1\33\7\12"+
    "\2\0\11\12\6\33\1\13\1\0\3\13\4\12\2\13"+
    "\1\33\1\0\1\12\2\33\1\100\2\12\1\33\1\12"+
    "\1\33\7\12\2\13\11\12\6\33\1\13\1\0\3\13"+
    "\4\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\3\12\1\101\3\12\2\13\11\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\1\102\2\12\1\33\1\12\1\33\7\12\2\13"+
    "\11\12\6\33\1\13\1\0\3\13\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\7\12"+
    "\2\13\7\12\1\103\1\12\6\33\1\13\1\0\3\13"+
    "\4\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\7\12\2\13\10\12\1\104\6\33\1\13"+
    "\1\0\3\13\4\12\2\13\1\33\1\0\1\12\2\33"+
    "\3\12\1\33\1\12\1\33\1\12\1\105\5\12\2\13"+
    "\11\12\6\33\1\13\1\0\3\13\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\3\12"+
    "\1\106\3\12\2\13\11\12\6\33\1\13\1\0\3\13"+
    "\4\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\2\12\1\16\4\12\2\13\11\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\5\12\1\107\1\12"+
    "\2\13\3\12\1\110\5\12\12\0\1\37\101\0\1\111"+
    "\1\0\1\112\1\113\1\114\45\0\1\111\1\0\1\111"+
    "\53\0\1\112\1\0\1\112\53\0\1\113\1\0\1\113"+
    "\53\0\1\114\1\0\1\114\21\0\20\52\1\76\35\52"+
    "\31\0\1\37\24\0\6\33\1\13\1\0\3\13\1\16"+
    "\3\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\7\12\2\13\11\12\6\33\1\13\1\0"+
    "\3\13\4\12\2\13\1\33\1\0\1\12\2\33\3\12"+
    "\1\33\1\12\1\33\7\12\2\13\3\12\1\115\5\12"+
    "\6\33\1\13\1\0\1\13\1\116\1\13\2\12\1\16"+
    "\1\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\7\12\2\13\4\12\1\117\4\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\4\12\1\120\2\12"+
    "\2\13\11\12\6\33\1\13\1\0\3\13\4\12\2\13"+
    "\1\33\1\0\1\12\2\33\3\12\1\33\1\121\1\33"+
    "\7\12\2\13\11\12\6\33\1\13\1\0\3\13\4\12"+
    "\2\13\1\33\1\0\1\12\2\33\3\12\1\33\1\12"+
    "\1\33\1\16\6\12\2\13\11\12\6\33\1\13\1\0"+
    "\3\13\4\12\2\13\1\33\1\0\1\12\2\33\3\12"+
    "\1\33\1\12\1\33\3\12\1\16\3\12\2\13\11\12"+
    "\6\33\1\13\1\0\3\13\4\12\2\13\1\33\1\0"+
    "\1\12\2\33\1\105\2\12\1\33\1\12\1\33\7\12"+
    "\2\13\11\12\6\33\1\13\1\0\3\13\4\12\2\13"+
    "\1\33\1\0\1\12\2\33\3\12\1\33\1\12\1\33"+
    "\1\12\1\122\5\12\2\13\11\12\10\0\2\123\54\0"+
    "\2\124\54\0\2\125\54\0\2\126\44\0\6\33\1\13"+
    "\1\0\3\13\4\12\2\13\1\33\1\0\1\12\2\33"+
    "\3\12\1\33\1\12\1\33\7\12\2\13\1\12\1\16"+
    "\7\12\6\0\1\13\1\0\11\13\2\0\1\13\2\0"+
    "\3\13\1\0\1\13\1\0\1\13\1\127\20\13\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\1\130\6\12\2\13"+
    "\11\12\6\33\1\13\1\0\3\13\4\12\2\13\1\33"+
    "\1\0\1\12\2\33\3\12\1\33\1\12\1\33\2\12"+
    "\1\131\4\12\2\13\11\12\6\33\1\13\1\0\3\13"+
    "\4\12\2\13\1\33\1\0\1\12\2\33\3\12\1\33"+
    "\1\12\1\33\7\12\2\13\2\12\1\16\6\12\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\132\1\33\7\12\2\13\11\12"+
    "\6\0\1\133\3\0\1\134\4\0\1\133\12\0\1\37"+
    "\10\0\2\133\30\0\1\135\12\0\1\37\10\0\1\135"+
    "\31\0\1\136\12\0\1\37\10\0\2\136\17\0\1\137"+
    "\10\0\1\137\7\0\1\137\2\0\1\37\1\0\1\137"+
    "\1\0\1\137\1\0\1\137\2\0\3\137\2\0\1\137"+
    "\13\0\1\13\1\0\11\13\2\0\1\13\2\0\3\13"+
    "\1\0\1\13\1\0\12\13\1\140\7\13\6\33\1\13"+
    "\1\0\3\13\4\12\2\13\1\33\1\0\1\12\2\33"+
    "\3\12\1\33\1\12\1\33\6\12\1\141\2\13\11\12"+
    "\6\33\1\13\1\0\3\13\4\12\2\13\1\33\1\0"+
    "\1\12\2\33\3\12\1\33\1\12\1\33\7\12\2\13"+
    "\3\12\1\16\5\12\6\33\1\13\1\0\3\13\4\12"+
    "\2\13\1\33\1\0\1\12\2\33\3\12\1\33\1\12"+
    "\1\33\7\12\2\13\5\12\1\142\3\12\6\0\1\133"+
    "\1\0\1\143\1\144\1\145\3\0\1\146\1\133\2\0"+
    "\1\147\2\0\1\150\1\0\1\151\2\0\1\37\1\0"+
    "\4\151\3\0\2\133\17\0\1\145\10\0\1\145\23\0"+
    "\2\145\21\0\1\152\1\153\4\0\1\154\1\135\2\0"+
    "\1\155\2\0\1\156\4\0\1\37\10\0\1\135\22\0"+
    "\1\157\1\160\4\0\1\161\1\136\2\0\1\162\2\0"+
    "\1\163\4\0\1\37\10\0\2\136\17\0\1\137\1\0"+
    "\1\164\1\165\4\0\1\166\1\137\2\0\1\167\2\0"+
    "\1\170\1\0\1\137\2\0\1\37\1\0\1\137\1\0"+
    "\1\137\1\0\1\137\2\0\3\137\2\0\1\137\13\0"+
    "\1\13\1\0\11\13\2\0\1\13\2\0\3\13\1\0"+
    "\1\13\1\0\13\13\1\171\6\13\6\33\1\13\1\0"+
    "\1\13\1\116\1\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\7\12\2\13\11\12"+
    "\6\33\1\13\1\0\3\13\4\12\2\13\1\33\1\0"+
    "\1\12\2\33\3\12\1\33\1\12\1\33\7\12\2\13"+
    "\6\12\1\172\2\12\6\0\1\173\3\0\1\174\4\0"+
    "\1\173\23\0\2\173\17\0\1\173\3\0\1\174\4\0"+
    "\1\173\12\0\1\37\10\0\2\173\17\0\1\145\10\0"+
    "\1\145\2\0\1\175\4\0\1\151\4\0\4\151\3\0"+
    "\2\145\17\0\1\176\10\0\1\176\23\0\2\176\17\0"+
    "\1\177\1\0\1\143\1\144\1\200\3\0\1\146\1\177"+
    "\2\0\1\147\2\0\1\150\1\0\1\151\2\0\1\37"+
    "\1\201\4\151\3\0\2\177\21\0\2\202\54\0\2\203"+
    "\63\0\1\204\23\0\1\204\31\0\1\204\12\0\1\37"+
    "\10\0\1\204\31\0\1\205\23\0\1\205\22\0\1\152"+
    "\1\153\4\0\1\154\1\206\2\0\1\155\2\0\1\156"+
    "\4\0\1\37\10\0\1\206\22\0\2\207\63\0\1\210"+
    "\23\0\2\210\30\0\1\210\12\0\1\37\10\0\2\210"+
    "\30\0\1\211\23\0\2\211\21\0\1\157\1\160\4\0"+
    "\1\161\1\212\2\0\1\162\2\0\1\163\4\0\1\37"+
    "\10\0\2\212\21\0\2\213\52\0\1\214\10\0\1\214"+
    "\7\0\1\214\4\0\1\214\1\0\1\214\1\0\1\214"+
    "\2\0\3\214\2\0\1\214\13\0\1\214\10\0\1\214"+
    "\7\0\1\214\2\0\1\37\1\0\1\214\1\0\1\214"+
    "\1\0\1\214\2\0\3\214\2\0\1\214\13\0\1\215"+
    "\10\0\1\215\7\0\1\215\4\0\1\215\1\0\1\215"+
    "\1\0\1\215\2\0\3\215\2\0\1\215\13\0\1\216"+
    "\1\0\1\164\1\165\4\0\1\166\1\216\2\0\1\167"+
    "\2\0\1\170\1\0\1\216\2\0\1\37\1\0\1\216"+
    "\1\0\1\216\1\0\1\216\2\0\3\216\2\0\1\216"+
    "\15\0\2\217\52\0\1\13\1\0\11\13\2\0\1\13"+
    "\2\0\1\220\2\13\1\0\1\13\1\0\22\13\6\33"+
    "\1\13\1\0\3\13\4\12\2\13\1\33\1\0\1\12"+
    "\2\33\3\12\1\33\1\12\1\33\5\12\1\107\1\12"+
    "\2\13\11\12\6\0\1\173\1\0\2\143\1\221\3\0"+
    "\1\222\1\173\2\0\1\223\4\0\1\224\2\0\1\37"+
    "\1\0\4\224\3\0\2\173\17\0\1\221\10\0\1\221"+
    "\23\0\2\221\33\0\1\175\4\0\1\151\4\0\4\151"+
    "\24\0\1\225\1\0\1\143\1\144\1\226\4\0\1\225"+
    "\2\0\1\227\2\0\1\150\4\0\1\37\10\0\2\225"+
    "\17\0\1\177\3\0\1\230\3\0\1\231\1\177\2\0"+
    "\1\232\4\0\1\233\2\0\1\37\1\0\4\233\3\0"+
    "\2\177\17\0\1\230\10\0\1\230\2\0\1\175\4\0"+
    "\1\151\4\0\4\151\3\0\2\230\23\0\1\175\51\0"+
    "\1\234\3\0\1\235\4\0\1\234\23\0\2\234\17\0"+
    "\1\236\10\0\1\236\23\0\2\236\21\0\2\152\4\0"+
    "\1\237\1\204\2\0\1\240\7\0\1\37\10\0\1\204"+
    "\22\0\1\152\1\153\5\0\1\241\2\0\1\242\2\0"+
    "\1\156\4\0\1\37\10\0\1\241\30\0\1\243\1\206"+
    "\2\0\1\244\7\0\1\37\10\0\1\206\31\0\1\245"+
    "\23\0\1\245\22\0\2\157\4\0\1\246\1\210\2\0"+
    "\1\247\7\0\1\37\10\0\2\210\21\0\1\157\1\160"+
    "\5\0\1\250\2\0\1\251\2\0\1\163\4\0\1\37"+
    "\10\0\2\250\27\0\1\252\1\212\2\0\1\253\7\0"+
    "\1\37\10\0\2\212\30\0\1\254\23\0\2\254\17\0"+
    "\1\214\1\0\2\164\4\0\1\255\1\214\2\0\1\256"+
    "\4\0\1\214\2\0\1\37\1\0\1\214\1\0\1\214"+
    "\1\0\1\214\2\0\3\214\2\0\1\214\13\0\1\257"+
    "\1\0\1\164\1\165\5\0\1\257\2\0\1\260\2\0"+
    "\1\170\1\0\1\257\2\0\1\37\1\0\1\257\1\0"+
    "\1\257\1\0\1\257\2\0\3\257\2\0\1\257\13\0"+
    "\1\216\7\0\1\261\1\216\2\0\1\262\4\0\1\216"+
    "\2\0\1\37\1\0\1\216\1\0\1\216\1\0\1\216"+
    "\2\0\3\216\2\0\1\216\13\0\1\263\10\0\1\263"+
    "\7\0\1\263\4\0\1\263\1\0\1\263\1\0\1\263"+
    "\2\0\3\263\2\0\1\263\13\0\1\13\1\0\11\13"+
    "\2\0\1\13\2\0\3\13\1\0\1\13\1\0\14\13"+
    "\1\264\5\13\6\0\1\221\10\0\1\221\2\0\1\265"+
    "\4\0\1\224\4\0\4\224\3\0\2\221\17\0\1\266"+
    "\10\0\1\266\23\0\2\266\17\0\1\177\1\0\2\143"+
    "\1\267\3\0\1\222\1\177\2\0\1\223\4\0\1\224"+
    "\2\0\1\37\1\270\4\224\3\0\2\177\21\0\2\271"+
    "\52\0\1\225\1\0\1\143\1\144\1\230\3\0\1\231"+
    "\1\225\2\0\1\272\2\0\1\150\1\0\1\233\2\0"+
    "\1\37\1\0\4\233\3\0\2\225\17\0\1\230\10\0"+
    "\1\230\23\0\2\230\17\0\1\177\1\0\1\143\1\144"+
    "\1\226\4\0\1\177\2\0\1\227\2\0\1\150\4\0"+
    "\1\37\10\0\2\177\17\0\1\230\10\0\1\230\2\0"+
    "\1\273\4\0\1\233\4\0\4\233\3\0\2\230\17\0"+
    "\1\274\10\0\1\274\23\0\2\274\23\0\1\273\3\0"+
    "\1\231\3\0\1\232\4\0\1\233\2\0\1\37\1\275"+
    "\4\233\26\0\2\276\52\0\1\234\3\0\1\277\3\0"+
    "\1\300\1\234\2\0\1\301\4\0\1\302\4\0\4\302"+
    "\3\0\2\234\17\0\1\277\10\0\1\277\23\0\2\277"+
    "\17\0\1\303\1\0\1\143\1\144\1\226\4\0\1\303"+
    "\5\0\1\150\4\0\1\37\10\0\2\303\30\0\1\304"+
    "\23\0\1\304\22\0\2\152\4\0\1\237\1\206\2\0"+
    "\1\240\7\0\1\37\10\0\1\206\22\0\1\152\1\153"+
    "\4\0\1\243\1\241\2\0\1\305\2\0\1\156\4\0"+
    "\1\37\10\0\1\241\22\0\1\152\1\153\5\0\1\206"+
    "\2\0\1\242\2\0\1\156\4\0\1\37\10\0\1\206"+
    "\31\0\1\306\23\0\1\306\30\0\1\243\3\0\1\244"+
    "\7\0\1\37\41\0\1\307\1\245\2\0\1\310\20\0"+
    "\1\245\31\0\1\311\23\0\2\311\21\0\2\157\4\0"+
    "\1\246\1\212\2\0\1\247\7\0\1\37\10\0\2\212"+
    "\21\0\1\157\1\160\4\0\1\252\1\250\2\0\1\312"+
    "\2\0\1\163\4\0\1\37\10\0\2\250\21\0\1\157"+
    "\1\160\5\0\1\212\2\0\1\251\2\0\1\163\4\0"+
    "\1\37\10\0\2\212\30\0\1\313\23\0\2\313\27\0"+
    "\1\252\3\0\1\253\7\0\1\37\41\0\1\314\1\254"+
    "\2\0\1\315\20\0\2\254\17\0\1\316\10\0\1\316"+
    "\7\0\1\316\4\0\1\316\1\0\1\316\1\0\1\316"+
    "\2\0\3\316\2\0\1\316\13\0\1\216\1\0\2\164"+
    "\4\0\1\255\1\216\2\0\1\256\4\0\1\216\2\0"+
    "\1\37\1\0\1\216\1\0\1\216\1\0\1\216\2\0"+
    "\3\216\2\0\1\216\13\0\1\257\1\0\1\164\1\165"+
    "\4\0\1\261\1\257\2\0\1\317\2\0\1\170\1\0"+
    "\1\257\2\0\1\37\1\0\1\257\1\0\1\257\1\0"+
    "\1\257\2\0\3\257\2\0\1\257\13\0\1\216\1\0"+
    "\1\164\1\165\5\0\1\216\2\0\1\260\2\0\1\170"+
    "\1\0\1\216\2\0\1\37\1\0\1\216\1\0\1\216"+
    "\1\0\1\216\2\0\3\216\2\0\1\216\13\0\1\320"+
    "\10\0\1\320\7\0\1\320\4\0\1\320\1\0\1\320"+
    "\1\0\1\320\2\0\3\320\2\0\1\320\23\0\1\261"+
    "\3\0\1\262\7\0\1\37\31\0\1\263\7\0\1\321"+
    "\1\263\2\0\1\322\4\0\1\263\4\0\1\263\1\0"+
    "\1\263\1\0\1\263\2\0\3\263\2\0\1\263\13\0"+
    "\1\13\1\0\11\13\2\0\1\13\2\0\3\13\1\0"+
    "\1\13\1\0\6\13\1\323\13\13\22\0\1\265\4\0"+
    "\1\224\4\0\4\224\24\0\1\324\1\0\2\143\1\226"+
    "\4\0\1\324\2\0\1\325\7\0\1\37\10\0\2\324"+
    "\17\0\1\230\10\0\1\230\2\0\1\265\4\0\1\224"+
    "\4\0\4\224\3\0\2\230\23\0\1\265\51\0\1\326"+
    "\10\0\1\326\23\0\2\326\17\0\1\177\1\0\1\143"+
    "\1\144\1\230\3\0\1\231\1\177\2\0\1\272\2\0"+
    "\1\150\1\0\1\233\2\0\1\37\1\275\4\233\3\0"+
    "\2\177\33\0\1\273\4\0\1\233\4\0\4\233\24\0"+
    "\1\274\10\0\1\274\2\0\1\327\7\0\1\37\10\0"+
    "\2\274\23\0\1\273\51\0\1\330\10\0\1\330\23\0"+
    "\2\330\17\0\1\277\10\0\1\277\2\0\1\331\4\0"+
    "\1\302\4\0\4\302\3\0\2\277\17\0\1\332\10\0"+
    "\1\332\23\0\2\332\23\0\1\331\3\0\1\300\3\0"+
    "\1\301\4\0\1\302\3\0\1\333\4\302\26\0\2\334"+
    "\52\0\1\303\1\0\1\143\1\144\1\230\3\0\1\231"+
    "\1\303\2\0\1\232\2\0\1\150\1\0\1\233\2\0"+
    "\1\37\1\0\4\233\3\0\2\303\21\0\2\152\5\0"+
    "\1\335\2\0\1\336\7\0\1\37\10\0\1\335\22\0"+
    "\1\152\1\153\4\0\1\243\1\206\2\0\1\305\2\0"+
    "\1\156\4\0\1\37\10\0\1\206\31\0\1\306\2\0"+
    "\1\327\7\0\1\37\10\0\1\306\31\0\1\337\23\0"+
    "\1\337\30\0\1\307\3\0\1\310\43\0\2\157\5\0"+
    "\1\340\2\0\1\341\7\0\1\37\10\0\2\340\21\0"+
    "\1\157\1\160\4\0\1\252\1\212\2\0\1\312\2\0"+
    "\1\163\4\0\1\37\10\0\2\212\30\0\1\313\2\0"+
    "\1\327\7\0\1\37\10\0\2\313\30\0\1\342\23\0"+
    "\2\342\27\0\1\314\3\0\1\315\41\0\1\343\1\0"+
    "\2\164\5\0\1\343\2\0\1\344\4\0\1\343\2\0"+
    "\1\37\1\0\1\343\1\0\1\343\1\0\1\343\2\0"+
    "\3\343\2\0\1\343\13\0\1\216\1\0\1\164\1\165"+
    "\4\0\1\261\1\216\2\0\1\317\2\0\1\170\1\0"+
    "\1\216\2\0\1\37\1\0\1\216\1\0\1\216\1\0"+
    "\1\216\2\0\3\216\2\0\1\216\13\0\1\320\10\0"+
    "\1\320\2\0\1\327\4\0\1\320\2\0\1\37\1\0"+
    "\1\320\1\0\1\320\1\0\1\320\2\0\3\320\2\0"+
    "\1\320\13\0\1\345\10\0\1\345\7\0\1\345\4\0"+
    "\1\345\1\0\1\345\1\0\1\345\2\0\3\345\2\0"+
    "\1\345\23\0\1\321\3\0\1\322\41\0\1\324\1\0"+
    "\2\143\1\230\3\0\1\231\1\324\2\0\1\346\4\0"+
    "\1\233\2\0\1\37\1\0\4\233\3\0\2\324\17\0"+
    "\1\177\1\0\2\143\1\226\4\0\1\177\2\0\1\325"+
    "\7\0\1\37\10\0\2\177\17\0\1\347\1\0\2\143"+
    "\1\226\4\0\1\347\12\0\1\37\10\0\2\347\33\0"+
    "\1\327\7\0\1\37\31\0\1\330\10\0\1\330\12\0"+
    "\1\37\10\0\2\330\33\0\1\331\4\0\1\302\4\0"+
    "\4\302\24\0\1\332\10\0\1\332\2\0\1\350\20\0"+
    "\2\332\23\0\1\331\51\0\1\351\10\0\1\351\23\0"+
    "\2\351\21\0\2\152\4\0\1\243\1\335\2\0\1\352"+
    "\7\0\1\37\10\0\1\335\22\0\2\152\5\0\1\206"+
    "\2\0\1\336\7\0\1\37\10\0\1\206\31\0\1\337"+
    "\2\0\1\350\20\0\1\337\22\0\2\157\4\0\1\252"+
    "\1\340\2\0\1\353\7\0\1\37\10\0\2\340\21\0"+
    "\2\157\5\0\1\212\2\0\1\341\7\0\1\37\10\0"+
    "\2\212\30\0\1\342\2\0\1\350\20\0\2\342\17\0"+
    "\1\343\1\0\2\164\4\0\1\261\1\343\2\0\1\354"+
    "\4\0\1\343\2\0\1\37\1\0\1\343\1\0\1\343"+
    "\1\0\1\343\2\0\3\343\2\0\1\343\13\0\1\216"+
    "\1\0\2\164\5\0\1\216\2\0\1\344\4\0\1\216"+
    "\2\0\1\37\1\0\1\216\1\0\1\216\1\0\1\216"+
    "\2\0\3\216\2\0\1\216\13\0\1\345\10\0\1\345"+
    "\2\0\1\350\4\0\1\345\4\0\1\345\1\0\1\345"+
    "\1\0\1\345\2\0\3\345\2\0\1\345\13\0\1\177"+
    "\1\0\2\143\1\230\3\0\1\231\1\177\2\0\1\346"+
    "\4\0\1\233\2\0\1\37\1\275\4\233\3\0\2\177"+
    "\17\0\1\347\1\0\2\143\1\230\3\0\1\231\1\347"+
    "\2\0\1\232\4\0\1\233\2\0\1\37\1\0\4\233"+
    "\3\0\2\347\33\0\1\350\43\0\2\152\4\0\1\243"+
    "\1\206\2\0\1\352\7\0\1\37\10\0\1\206\22\0"+
    "\2\157\4\0\1\252\1\212\2\0\1\353\7\0\1\37"+
    "\10\0\2\212\17\0\1\216\1\0\2\164\4\0\1\261"+
    "\1\216\2\0\1\354\4\0\1\216\2\0\1\37\1\0"+
    "\1\216\1\0\1\216\1\0\1\216\2\0\3\216\2\0"+
    "\1\216\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\3\11\22\1\1\0\1\1\2\0\1\11"+
    "\1\0\2\1\10\0\15\1\7\0\12\1\4\0\6\1"+
    "\4\0\5\1\1\0\6\1\4\0\1\1\5\0\1\1"+
    "\4\0\1\1\4\0\1\1\1\0\2\1\3\0\1\1"+
    "\6\0\1\1\3\0\1\1\3\0\1\1\2\0\1\1"+
    "\4\0\1\1\1\0\1\1\4\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\2\0\2\1\2\0\1\1"+
    "\2\0\2\1\2\0\2\1\5\0\1\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\2\0\2\1\6\0\1\1"+
    "\4\0\1\1\2\0\1\1\2\0\1\1\2\0\2\1"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scheme(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                                  "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 5: break;
          case 2: 
            { System.out.println("Comment \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 6: break;
          case 3: 
            { 
            } 
            // fall through
          case 7: break;
          case 4: 
            { System.out.println("Identifier \""+yytext()+"\" at line "+yyline+", column "+yycolumn );
            } 
            // fall through
          case 8: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scheme [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scheme scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scheme(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
